// Code generated by protoc-gen-go.
// source: whoson/sync.proto
// DO NOT EDIT!

/*
Package whoson is a generated protocol buffer package.

It is generated from these files:
	whoson/sync.proto

It has these top-level messages:
	WSRequest
	WSResponse
	WSRequestDump
	WSResponseDump
*/
package whoson

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WSRequest struct {
	Expire int64  `protobuf:"varint,1,opt,name=Expire" json:"Expire,omitempty"`
	IP     string `protobuf:"bytes,2,opt,name=IP" json:"IP,omitempty"`
	Data   string `protobuf:"bytes,3,opt,name=Data" json:"Data,omitempty"`
	Method string `protobuf:"bytes,4,opt,name=Method" json:"Method,omitempty"`
}

func (m *WSRequest) Reset()                    { *m = WSRequest{} }
func (m *WSRequest) String() string            { return proto.CompactTextString(m) }
func (*WSRequest) ProtoMessage()               {}
func (*WSRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type WSResponse struct {
	Rcode int32  `protobuf:"varint,1,opt,name=Rcode" json:"Rcode,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
}

func (m *WSResponse) Reset()                    { *m = WSResponse{} }
func (m *WSResponse) String() string            { return proto.CompactTextString(m) }
func (*WSResponse) ProtoMessage()               {}
func (*WSResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type WSRequestDump struct {
}

func (m *WSRequestDump) Reset()                    { *m = WSRequestDump{} }
func (m *WSRequestDump) String() string            { return proto.CompactTextString(m) }
func (*WSRequestDump) ProtoMessage()               {}
func (*WSRequestDump) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type WSResponseDump struct {
	Rcode int32  `protobuf:"varint,1,opt,name=Rcode" json:"Rcode,omitempty"`
	Json  []byte `protobuf:"bytes,2,opt,name=json,proto3" json:"json,omitempty"`
}

func (m *WSResponseDump) Reset()                    { *m = WSResponseDump{} }
func (m *WSResponseDump) String() string            { return proto.CompactTextString(m) }
func (*WSResponseDump) ProtoMessage()               {}
func (*WSResponseDump) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*WSRequest)(nil), "whoson.WSRequest")
	proto.RegisterType((*WSResponse)(nil), "whoson.WSResponse")
	proto.RegisterType((*WSRequestDump)(nil), "whoson.WSRequestDump")
	proto.RegisterType((*WSResponseDump)(nil), "whoson.WSResponseDump")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sync service

type SyncClient interface {
	Set(ctx context.Context, in *WSRequest, opts ...grpc.CallOption) (*WSResponse, error)
	Del(ctx context.Context, in *WSRequest, opts ...grpc.CallOption) (*WSResponse, error)
}

type syncClient struct {
	cc *grpc.ClientConn
}

func NewSyncClient(cc *grpc.ClientConn) SyncClient {
	return &syncClient{cc}
}

func (c *syncClient) Set(ctx context.Context, in *WSRequest, opts ...grpc.CallOption) (*WSResponse, error) {
	out := new(WSResponse)
	err := grpc.Invoke(ctx, "/whoson.sync/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncClient) Del(ctx context.Context, in *WSRequest, opts ...grpc.CallOption) (*WSResponse, error) {
	out := new(WSResponse)
	err := grpc.Invoke(ctx, "/whoson.sync/Del", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sync service

type SyncServer interface {
	Set(context.Context, *WSRequest) (*WSResponse, error)
	Del(context.Context, *WSRequest) (*WSResponse, error)
}

func RegisterSyncServer(s *grpc.Server, srv SyncServer) {
	s.RegisterService(&_Sync_serviceDesc, srv)
}

func _Sync_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whoson.sync/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServer).Set(ctx, req.(*WSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sync_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whoson.sync/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServer).Del(ctx, req.(*WSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "whoson.sync",
	HandlerType: (*SyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _Sync_Set_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _Sync_Del_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whoson/sync.proto",
}

func init() { proto.RegisterFile("whoson/sync.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0xdd, 0x4d, 0xba, 0xd0, 0x41, 0xab, 0x1d, 0x44, 0x82, 0xa7, 0x92, 0x53, 0x4f, 0x11,
	0xd4, 0x93, 0xe7, 0xf5, 0xd0, 0x43, 0xa1, 0xa4, 0x07, 0x8f, 0x52, 0xbb, 0xd1, 0x55, 0x34, 0x13,
	0x37, 0x59, 0xd4, 0x7f, 0x2f, 0x49, 0x96, 0xd5, 0x8b, 0xe0, 0xed, 0xbd, 0xc7, 0xe4, 0x7d, 0x99,
	0x81, 0xf9, 0x47, 0x4b, 0x9e, 0xec, 0x85, 0xff, 0xb2, 0x7b, 0xe5, 0x3a, 0x0a, 0x84, 0x55, 0x8e,
	0xe4, 0x3d, 0x4c, 0xef, 0xb6, 0xda, 0xbc, 0xf7, 0xc6, 0x07, 0x3c, 0x83, 0xea, 0xf6, 0xd3, 0x3d,
	0x77, 0x46, 0x14, 0x8b, 0x62, 0xc9, 0xf4, 0xe0, 0x70, 0x06, 0xe5, 0x6a, 0x23, 0xca, 0x45, 0xb1,
	0x9c, 0xea, 0x72, 0xb5, 0x41, 0x04, 0x5e, 0xef, 0xc2, 0x4e, 0xb0, 0x94, 0x24, 0x1d, 0xdf, 0xae,
	0x4d, 0x68, 0xa9, 0x11, 0x3c, 0xa5, 0x83, 0x93, 0xd7, 0x00, 0x11, 0xe0, 0x1d, 0x59, 0x6f, 0xf0,
	0x14, 0x26, 0x7a, 0x4f, 0x4d, 0x06, 0x4c, 0x74, 0x36, 0x78, 0x02, 0x6c, 0xed, 0x9f, 0x06, 0x40,
	0x94, 0xf2, 0x18, 0x8e, 0xc6, 0x6f, 0xd5, 0xfd, 0x9b, 0x93, 0x37, 0x30, 0xfb, 0xa9, 0x89, 0xc9,
	0x1f, 0x55, 0x08, 0xfc, 0xc5, 0x93, 0x4d, 0x5d, 0x87, 0x3a, 0xe9, 0xcb, 0x47, 0xe0, 0x71, 0x73,
	0x54, 0xc0, 0xb6, 0x26, 0xe0, 0x5c, 0xe5, 0xdd, 0xd5, 0x48, 0x38, 0xc7, 0xdf, 0x51, 0x66, 0xc8,
	0x83, 0x38, 0x5f, 0x9b, 0xd7, 0x7f, 0xcf, 0x3f, 0x54, 0xe9, 0xb4, 0x57, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xba, 0x6a, 0x90, 0x69, 0x6f, 0x01, 0x00, 0x00,
}

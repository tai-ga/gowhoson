#!/bin/bash
#
# gowhoson        Manage the gowhoson
#       
# chkconfig:   2345 95 95
# description: gowhoson is a golang implementation of the "Whoson" protocol.
# processname: gowhoson
# config: /etc/gowhoson.json
# pidfile: /var/run/gowhoson.pid

### BEGIN INIT INFO
# Provides:       gowhoson
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start: 2 3 4 5
# Default-Stop:  0 1 6
# Short-Description: golang implementation of the "Whoson" protocol
# Description: gowhoson is a golang implementation of the "Whoson" protocol
### END INIT INFO

# source function library
. /etc/rc.d/init.d/functions

if [ -f /etc/sysconfig/gowhoson ] ; then
        . /etc/sysconfig/gowhoson
else
        LOGFILE="/var/log/gowhoson/gowhoson.log"
fi


prog="gowhoson"
user="gowhoson"
exec="/usr/sbin/$prog"
pidfile="/var/run/$prog.pid"
lockfile="/var/lock/subsys/$prog"
logfile=$LOGFILE
conffile="/etc/gowhoson.json"

# pull in sysconfig settings
[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

# export GOMAXPROCS=${GOMAXPROCS:-2}

start() {
    [ -x $exec ]     || exit 5
    [ -f $conffile ] || exit 6

    umask 033

    touch $pidfile
    chown $user:$user $pidfile

    if [ $logfile = "stdout" ]; then
        LOGOPT=""
    else
        LOGDIR=`dirname $logfile`
        if [ ! -d $LOGDIR ] ; then
            mkdir -p $LOGDIR
            chown $user:$user $LOGDIR
        fi
        touch $logfile
        chown $user:$user $logfile
        LOGOPT="--log $logfile"
    fi

    echo -n $"Starting $prog: "
    
    ## holy shell shenanigans, batman!
    ## daemon can't be backgrounded.  we need the pid of the spawned process,
    ## which is actually done via runuser thanks to --user.  you can't do "cmd
    ## &; action" but you can do "{cmd &}; action".
    daemon \
        --pidfile=$pidfile \
        --user=$user \
        " { $exec --config $conffile server $LOGOPT & } ; echo \$! >| $pidfile "
    
    RETVAL=$?
    echo
    
    [ $RETVAL -eq 0 ] && touch $lockfile
    
    return $RETVAL
}

stop() {
    echo -n $"Shutting down $prog: "
    ## graceful shutdown with SIGINT
    killproc -p $pidfile $exec -INT
    RETVAL=$?
    echo
    [ $RETVAL -eq 0 ] && rm -f $lockfile
    return $RETVAL
}

restart() {
    stop
    start
}

reload() {
    echo -n $"Reloading $prog: "
    killproc -p $pidfile $exec -HUP
    echo
}

force_reload() {
    restart
}

rh_status() {
    status -p "$pidfile" -l $prog $exec
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac

exit $?
